function [signal, field] = t2decaydemo(nSteps, deltaField, D, field)
%T2DECAYDEMO  Simulate T2 decay from random field variation (BPP-esque) theory
%
%[S, F] = t2decaydemo(nSteps, deltaField, D, F0);
%
%S          = Simulated signal over timecourse of experiment
%
%F          = Field used in simulation - 2D matrix in units of microtesla from B0
%
%nSteps     = Number of time steps to run.  This dictates both the length of
%             the simulated timecourse, and the computational time requirements.
%             The length of the simulated time course is nSteps*tStep. tStep 
%             can be changed in the code below, but in general 1e-7 is a good 
%             choice.
%
%deltaField = The range of the random field to be simulated in microtesla.  For
%             human scanners, the deltaField is typically about 25ppm across the 
%             full bore, but only about 1ppm across a brain. At 3T, that's 75 
%             and 3 microtesla, respectively.  This argument is ignored if the 
%             user supplies a field matrix in the last argument (called F0), but 
%             it must be included nonetheless.
%
%D          = Magnitude of diffusion range, in maxtrix element units.  For instance,
%             if a desired possible stepsize is [-2:2], then D = 2.  If set
%             to 0, diffusion is neglected, and the spins are static.
%
%F0         = (OPTIONAL) A 2D random field matrix, either generated by the user
%             independently, or saved from a previous run in the matrix F above.  
%             If the user wishes to rerun a simulation on the same field but with 
%             different parameters, the F field can be supplied as F0 in the next run.
%             If omitted, a new random field will be calucalted.

D=round(D);
gamma = 267.5;  %in rad/s/uT

baseField = 3.0; %in tesla
tStep=1e-7; %timestep for each simulation datapoint, in seconds

rng('shuffle');
if ~(exist('field', 'var'))
    field =imresize(rand(3), 50);
    field = field - max(field(:))/2;
    field = (baseField*deltaField/2)*(field/max(field(:))); %in ppm
end

figure, imagesc(field), axis('image'), colorbar;
title('B_0 Field Simulated (\muT)', 'FontSize', 14);
drawnow;
movegui('west')

phi=zeros(1,numel(field));
signal=numel(field)*ones(1,numel(nSteps));

if D == 0
    
    for ii =1:nSteps
        for jj = 2:numel(phi)
            phi(jj) = phi(jj) + gamma*field(jj)*tStep;
        end
        [vx,vy] = pol2cart(phi,ones(1,numel(phi)));
        signal(ii) = abs(sum(vx) + 1i*sum(vy));
    end
else
    [y,x]=ind2sub(size(field), 1:numel(field));
    for ii = 1:nSteps
        x = x + randi([-D D], [1 numel(x)]);
        y = y + randi([-D D], [1 numel(y)]);
        x(x==0)=1;
        y(y==0)=1;
        xUnder = find(x<1);
        x(xUnder) = -x(xUnder);
        yUnder = find(y<1);
        y(yUnder) = -y(yUnder);
        xOver = find(x>size(field,2));
        x(xOver) = size(field,2)-(x(xOver)-size(field,2));
        yOver = find(y>size(field,1));
        y(yOver) = size(field,1)-(y(yOver)-size(field,1));
        for jj = 1:numel(phi)
            phi(jj) = phi(jj) + gamma*field(x(jj),y(jj))*tStep;
        end
        [vx,vy] = pol2cart(phi,ones(1,numel(phi)));
        signal(ii) = abs(sum(vx) + 1i*sum(vy));
    end
    finalPositions = zeros(size(field));
    for ii = 1:numel(field)
        finalPositions(y(ii),x(ii)) = finalPositions(y(ii),x(ii)) + 1;
    end
    figure, imagesc(finalPositions), axis('image'), colorbar;
    title('Final Positions of Simulated Spins', 'FontSize', 14);
    movegui('east');
end

figure, plot(tStep:tStep:nSteps*tStep, signal);
xlabel('Time (s)', 'FontSize', 12);
ylabel('Signal (a.u.)', 'FontSize', 12);
title('Simulated Signal Decay', 'FontSize', 14);
movegui('center');





end